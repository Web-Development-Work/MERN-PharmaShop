const Brand = require('../models/Brand')
const express = require('express')
const app = express()
const handleErr = require('../HandleFunction/HandleErr')
const handleSuccess = require('../HandleFunction/handleSuccess')
const jwt = require("jsonwebtoken");
const fs = require('fs')
const mime = require('mime')
const upload = require('../HandleFunction/UploadFile')
const webp = require('webp-converter');
webp.grant_permission();

//Add a brand 
app.post('/api/addBrand', upload.single('fileData'), (req, res) => {    //tested
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path, (err, contents) => {
        if (err) {
            return res.json(handleErr(err))
        } else {
            if (req.body.name) {
                var file = __dirname + '/../pharmashopfiles/' + req.file.filename;
                var resultFile = __dirname + '/../pharmashopfiles/' + req.file.filename + '.webp';
                const result = webp.cwebp(file, resultFile, "-q 80", logging = "-v");
                result.then((resp) => {
                    console.log(resp);
                    let brand = {
                        name: req.body.name,
                        image: resultFile
                    }
                    Brand.create(brand, (err, doc) => {
                        if (err) return res.json(handleErr(err))
                        else {
                            return res.json(handleSuccess(doc))
                        }
                    })
                });

            } else {
                return res.json(handleErr('Brand name can not be null'))
            }
        }
    });
})

//Get all brands
app.post('/api/getBrands', (req, res) => {
    Brand.find({}).sort({ name: 1 }).exec((err, docs) => {
        if (err) return res.json(handleErr(err))
        else {
            return res.json(handleSuccess(docs))
        }
    })
})


//Change Brand image
app.post('/api/changeBrandImage', upload.single('fileData'), (req, res) => {    //tested
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path, (err, contents) => {
        if (err) {
            return res.json(handleErr(err))
        } else {
            if (req.body.id) {
                let { id } = req.body
                var file = __dirname + '/../pharmashopfiles/' + req.file.filename;
                var resultFile = __dirname + '/../pharmashopfiles/' + req.file.filename + '.webp';
                const result = webp.cwebp(file, resultFile, "-q 80", logging = "-v");
                result.then((resp) => {
                    Brand.findByIdAndUpdate(id, { image: resultFile }, { new: true }).exec((err, doc) => {
                        if (err) return res.json(handleErr(err))
                        else {
                            return res.json(handleSuccess(doc))
                        }
                    })
                });
            } else {
                return res.json(handleErr('Brandcan not be null'))
            }
        }
    });
})

//Change brand name
app.put('/api/brandName', (req, res) => {
    console.log('brand body->', req.body)
    if (req.body.id && req.body.name) {
        let { id, name } = req.body
        Brand.findByIdAndUpdate(id, { name }, { new: true }).exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                return res.json(handleSuccess(doc))
            }
        })
    } else {
        return res.json(handleErr('Brand can not be null'))
    }
})

//Disable brand
app.put('/api/disableBrand', (req, res) => {
    if (req.body.id) {
        let { id } = req.body
        Brand.findByIdAndUpdate(id, { enabled: false }, { new: true }).exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                return res.json(handleSuccess(doc))
            }
        })
    } else {
        return res.json(handleErr('Brand can not be null'))
    }
})

//Re-enable brand
app.put('/api/enableBrand', (req, res) => {
    if (req.body.id) {
        let { id } = req.body
        Brand.findByIdAndUpdate(id, { enabled: true }, { new: true }).exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                return res.json(handleSuccess(doc))
            }
        })
    } else {
        return res.json(handleErr('Brand can not be null'))
    }
})

//Search brands
app.post('/api/searchBrands', (req, res) => {
    if (req.body.name) {
        Brand.find({ name: { $regex: req.body.name + '.*' } })
            .limit(20)
            .exec((err, docs) => {
                if (err)
                    return res.json(handleErr(err))
                else { res.json(handleSuccess(docs)) }
            });
    } else {
        return res.json(handleErr('User name is required'))
    }
})

app.get('/api/getallbrandswithproducts', (req, res) => {
    Brand.aggregate
        ([
            {
                $lookup: {
                    from: "products",
                    localField: "_id",
                    foreignField: "brand",
                    as: "anything"
                }
            },
            { $project: { enabled: 1, createdDate: 1, name: 1, image: 1, size: { $size: "$anything" } } },
            { $match: { size: { $gt: 0 } } },
            { $project: { enabled: 1, createdDate: 1, name: 1, image: 1 } },
        ]).exec((err, docs) => {
            if (err) {
                return res.json({ message: "Failed", err })
            }
            else {
                return res.json({ message: "Brands with products", docs })
            }
        })
})


//Random Brand
app.post('/api/randomBrands', (req, res) => {
    let files = [
        "files-1627908307859",
        "files-1627908307860",
        "files-1627908307860",
        "files-1627908307861",
        "files-1627908307862",
        "files-1627908307863",
        "files-1627908307864",
        "files-1627908307865"
    ]
    files.forEach((fileName) => {
        let randomNumber = Math.round(Math.random() * 800)
        let data = {
            name: "Brand" + randomNumber,
            image: fileName
        }
        Brand.create(data, (err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                console.log('doc--->', doc)
            }
        })
    })
    setTimeout(() => {
        return res.json(handleSuccess('DONE'))
    }, 4000)
})

module.exports = app