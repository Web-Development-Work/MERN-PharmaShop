const Offers = require('../models/Offers')
const express = require('express')
const app = express()
const handleErr = require('../HandleFunction/HandleErr')
const handleSuccess = require('../HandleFunction/handleSuccess')
const jwt = require("jsonwebtoken");
const fs = require('fs')
const mime = require('mime')
const upload = require('../HandleFunction/UploadFile')
const uid = require('uid')
const webp = require('webp-converter');
webp.grant_permission();
//Add a Category 
app.post('/api/addOffer', upload.single('fileData'), (req, res) => {    //tested
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path, (err, contents) => {
        if (err) {
            return res.json(handleErr(err))
        } else {
            if (req.body.name && req.body.validTill) {
                let { name, discountPercent, validTill } = req.body
                var file = __dirname + '/../pharmashopfiles/' + req.file.filename;
                var resultFile = __dirname + '/../pharmashopfiles/' + req.file.filename + '.webp';
                const result = webp.cwebp(file, resultFile, "-q 80", logging = "-v");
                result.then((resp) => {
                    console.log(resp);
                    let offer = {
                        name,
                        coverImage: resultFile,
                        discountPercent: parseInt(discountPercent),
                        validTill,
                        offerCode: uid(8).toUpperCase()
                    }
                    Offers.create(offer, (err, doc) => {
                        if (err) return res.json(handleErr(err))
                        else {
                            return res.json(handleSuccess(doc))
                        }
                    })
                });
            } else {
                return res.json(handleErr('Offer can not be null'))
            }
        }
    });
})

//Get all enabled offers
app.post('/api/enabledOFfers', (req, res) => {
    let date = new Date()
    Offers.find({
        validTill: { $gte: date },
        enabled: true
    }).sort({ createdDate: -1 }).exec((err, docs) => {
        if (err) return res.json(handleErr(err))
        else {
            return res.json(handleSuccess(docs))
        }
    })
})

//Check validity
app.post('/api/checkOfferValidity', (req, res) => {
    if (req.body.offerCode) {
        let { offerCode } = req.body
        let date = new Date()
        Offers.findOne({ offerCode, validTill: { $gte: date } }).exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                if (doc !== null) {     //Offer is valid
                    return res.json(handleSuccess(doc))
                } else {
                    return res.json(handleErr('Offer has expired or code is invalid'))
                }
            }
        })
    } else {
        return res.json(handleErr('Offer code can not be mull'))
    }
})

//Update offer status
app.put('/api/updateOfferStatus', (req, res) => {
    if (req.body.id && req.body.enabled !== undefined) {
        let { id, enabled } = req.body
        Offers.findByIdAndUpdate(id, { enabled }, { new: true }).exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                if (doc !== null) {     //Offer is valid
                    return res.json(handleSuccess(doc))
                } else {
                    return res.json(handleErr('Offer has expired or code is invalid'))
                }
            }
        })
    } else {
        return res.json(handleErr('Offer is required'))
    }
})

app.post('/api/getAllOfers:page', (req, res) => {
    var perPage = 20
    var page = req.params.page || 1
    Offers.find({}).skip((perPage * page) - perPage).limit(perPage).exec((error, data) => {
        if (error) return res.json(handleErr(error))
        else Offers.estimatedDocumentCount({}).exec((err, count) => {
            if (err) return res.json(handleErr(err))
            else {
                let response = {
                    data,
                    current: page,
                    pages: Math.ceil(count / perPage),
                    total: count
                }
                return res.json(handleSuccess(response))
            }
        })
    })
})
module.exports = app